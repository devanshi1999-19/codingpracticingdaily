Problem Name: Create tree ( Using preorder and inorder)
Problem Difficulty: None
Problem Constraints: 1 <= N, M <= 10^4
Problem Description:
Given preorder and inorder create the tree

Input Format: Enter the size of the preorder array N then add N more elements and store in the array denoting the preorder traversal of the tree. Then enter the size of  the inorder array M and add M more elements and store the inorder traversal of the array.
Sample Input: 3
1 2 3
3
3 2 1
Output Format: Display the tree using a modified preorder function. For each node , first print its left child's data , then the data of the root itself , then the data of its right child. Do this for each node in a new line in preorder manner. If one of the children does not exist print END in its place. Refer to the sample testcase.
Sample Output: 2 => 1 <= END
3 => 2 <= END
END => 3 <= END



=====Solution=====
#include <iostream>
#include <queue>
using namespace std;

class node
{
public:
    int data;
    node *left;
    node *right;

    node(int d)
    {
        data = d;
        left = NULL;
        right = NULL;
    }
};


node *createTreeFromTrav(int *inOrder, int *preOrder, int s, int e)
{
    static int i = 0;
    //Base Case
    if (s > e)
    {
        return NULL;
    }
    //Rec Case
    node *root = new node(preOrder[i]);

    int index = -1;
    for (int j = s; s <= e; j++)
    {
        if (inOrder[j] == preOrder[i])
        {
            index = j;
            break;
        }
    }

    i++;
    root->left = createTreeFromTrav(inOrder, preOrder, s, index - 1);
    root->right = createTreeFromTrav(inOrder, preOrder, index + 1, e);
    return root;
}

void print(node *root)
{
    if (root == NULL)
    {
        return;
    }
    if (root->left)
        cout << root->left->data;
    else
        cout << "END";

    cout << " => " << root->data << " <= ";

    if (root->right)
        cout << root->right->data;
    else
        cout << "END";
    cout << endl;
    print(root->left);
    print(root->right);
}

int main()
{
    int inOrder[10000], preOrder[10000], n, m;
    cin >> n;
    for (int i = 0; i < n; i++)
    {
        cin >> preOrder[i];
    }
    cin >> m;
    for (int i = 0; i < m; i++)
    {
        cin >> inOrder[i];
    }

    node *root = createTreeFromTrav(inOrder, preOrder, 0, n - 1);

    print(root);

    return 0;
}

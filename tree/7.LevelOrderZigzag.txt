Problem Name: Level Order ( Zigzag , Binary Tree)
Problem Difficulty: None
Problem Constraints: None
Problem Description:
Given a binary tree. Print the zig zag order i.e print level 1 from left to right, level 2 from
right to left and so on. This means odd levels should get printed from left to right and
even levels should be printed from right to left. 

Input Format: Enter the values of all the nodes in the binary tree in pre-order format where true suggest the node exists and false suggests it is NULL
Sample Input: 10 true 20 true 40 false false true 50 false false true 30 true 60 false false true 73 false false
Output Format: Display the values in zigzag level order in which each value is separated by a space
Sample Output: 10 30 20 40 50 60 73 



=====Solution=====
//Rajkishor Ranjan
// Print all leaf nodes.

#include <iostream>
#include <queue>
#include <iostream>
#include <queue>
using namespace std;

class Node{
public:
	int data;
	Node *left;
	Node* right;
	Node()
	{
		left = NULL;
		right = NULL;
	}
	
	Node(int n){
		data = n;
		left = NULL;
		right = NULL;
	}
	// friend ostream& operator<<(ostream& writer, Node * root);
};

Node* takeInput(){
	//take input to construct a Binary Tree --depth wise
	int data;
	cin >> data;

	if(data == -1){
		return NULL;
	}

	Node * root = new Node(data);
	root->left = takeInput();	//take input for left SUBTREE 
	root->right = takeInput();
}

Node * takeInputLevel(){
	//function to take Input as a tree --levelwise
	int data;
	cin >> data;
	if (data == -1) return NULL;

	Node * root = new Node(data);
	queue<Node*> q;
	q.push(root);

	while(!q.empty()){
		//there is a node with potential to become parent
		Node *curParent = q.front();
		q.pop();

		int leftData;	cin >> leftData;
		//left child exists, hence create and attach to the parent
		//Also, this child can become Parent in the near future ;)
		if (leftData != -1){
			Node * tmp = new Node(leftData);
			curParent->left = tmp;
			q.push(tmp);
		}

		//similarly for right child
		int rightData; 	cin >> rightData;
		if(rightData != -1){
			Node * tmp = new Node(rightData);
			curParent->right = tmp;
			q.push(tmp);
		}
	}
	return root;
}


void printLevel(Node * root){
	queue<Node * > q;
	q.push(root);
	q.push(NULL);

	while(q.empty() == false){
		//I have atleast one node to print
		Node* cur = q.front();
		q.pop();
		
		//delimiter case
		if(cur == NULL){
			cout << endl;
			if (!q.empty()){
				q.push(NULL);
			}
			continue;
		}


		cout << cur->data << " ";
		if (cur->left) q.push(cur->left);
		if (cur->right) q.push(cur->right);
	}
}


void print(Node* root){
	//preorder Traversal --> root left right
	if (root == NULL) return;

	cout << root->data << " ";
	print(root->left);
	print(root->right);
}

void inorder(Node* root){
	//inorder--> left root right
	if (root == 0)	return;

	inorder(root->left);
	cout << root->data << " ";
	inorder(root->right);
}

void postOrder(Node* root){
	//postorder --> left right root
	if (root == 0)	return;

	postOrder(root->left);
	postOrder(root->right);
	cout << root->data << " ";
}

ostream& operator<<(ostream& writer, Node* root){
	//The call is resolved like operator<<(cout, root)-->signature matching
	//all data members of root are public; so can be accessed outside the class
	printLevel(root);
	return writer;
}

istream& operator>>(istream& is, Node*& root){
	root = takeInputLevel();
	return is;
}


int sumTree(Node * root){
	//sumTree UPDATES the tree
	//RETURNS the sum of ORIGINAL tree

	if (root == NULL){
		return 0;
	}

	int left = sumTree(root->left);	//get the sum of left SUBTREE; also update it
	int right = sumTree(root->right);
	int sumtoSend = left + right + root->data;
	//the sum of ORIGINAL TREE before updation
	root->data = left + right;
	return sumtoSend;
}


void printAltLevel( Node *root)
{
	queue<Node*> q;
	bool mySwitch = false;

	q.push(root);
	q.push(NULL);

	while(!q.empty())
	{
		Node *temp = q.front();
		q.pop();

		if( temp == NULL )
		{
			if(q.empty()) break;

			q.push(NULL);
			mySwitch = ~mySwitch;
			continue;
		}

		cout << temp -> data << " ";

		if(mySwitch)
		{
			if ( temp -> left ) q.push(temp -> left);

			if ( temp -> right ) q.push(temp -> right);
		}
		else
		{
			if ( temp -> right ) q.push(temp -> right);

			if ( temp -> left ) q.push(temp -> left);
		}

	}
}

void takeInput2( Node *root )
{
	cin >> root -> data;

	char str[10];

	cin >> str;

	if( str[0] == 't' )
	{
		root -> left = new Node;
		takeInput2( root -> left );
	}

	cin >> str;

	if( str[0] == 't' )
	{
		root -> right = new Node;
		takeInput2( root -> right );
	}
}

int height(Node* Node)
{
    if (Node==NULL)
        return 0;
    else
    {
        /* compute the height of each subtree */
        int lheight = height(Node->left);
        int rheight = height(Node->right);
 
        /* use the larger one */
        if (lheight > rheight)
            return(lheight+1);
        else return(rheight+1);
    }
}


void printGivenLevel( Node* root, int level, int ltr)
{
    if(root == NULL)
        return;
    if(level == 1)
        cout << root -> data << " ";
    else if (level > 1)
    {
        if(ltr)
        {
            printGivenLevel(root->right, level-1, ltr);
            printGivenLevel(root->left, level-1, ltr);
        }
        else
        {
            printGivenLevel(root->left, level-1, ltr);
            printGivenLevel(root->right, level-1, ltr);
        }
    }
}

void printSpiral(Node* root)
{
    int h = height(root);
    int i;
 
    /*ltr -> Left to Right. If this variable is set,
      then the given level is traverseed from left to right. */
    bool ltr = false;
    for(i=1; i<=h; i++)
    {
        printGivenLevel(root, i, ltr);
 
        /*Revert ltr to traverse next level in opposite order*/
        ltr = !ltr;
    }
}


int main()
{
	Node *root = new Node;
	takeInput2(root);
	printSpiral(root);
	//cout << calcSum(root);
	return 0;
}
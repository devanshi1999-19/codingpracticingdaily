Problem Name: Replace with Sum of greater nodes
Problem Difficulty: 2
Problem Constraints: 2 ≤ N ≤ 10^3
Problem Description:
Given a binary search tree, replace each nodes' data with the sum of all nodes' which are greater or equal than it. Include the current node's data also.

Input Format: The first line contains a number n showing the length of the inorder array of BST. The next line contains n integers denoting the elements of the array.
Sample Input: 7
20 
30 
40 
50 
60 
70 
80
Output Format: Print the preorder traversal of the new tree.
Sample Output: 260 330 350 300 150 210 80



=====Solution=====
import java.util.*;

public class Main {
	private class Node {
		int data;
		Node left;
		Node right;

		Node(int data, Node left, Node right) {
			this.data = data;
			this.left = left;
			this.right = right;
		}
	}

	private Node root;
	private int size;

	public Main(int... sa) {
		this.root = this.construct(sa, 0, sa.length - 1);
	}

	private Node construct(int[] sa, int lo, int hi) {
		if (lo > hi) {
			return null;
		}
		int mid = (lo + hi) / 2;
		Node rv = new Node(sa[mid], null, null);
		this.size++;
		rv.left = this.construct(sa, lo, mid - 1);
		rv.right = this.construct(sa, mid + 1, hi);
		return rv;
	}

	public void modifyBST() {
		int[] arr = {0};
		this.modifyBSTwithgreaterelementssum(this.root, arr);
	}
	
	private void modifyBSTwithgreaterelementssum(Node node, int[] sum) {
		if(node == null)
			return;
		modifyBSTwithgreaterelementssum(node.right, sum);
		sum[0]+=node.data;
		node.data = sum[0];
		modifyBSTwithgreaterelementssum(node.left, sum);
	}
	
	public void preorder() {
	    pre_order(this.root);
	}
	
	private void pre_order(Node node) {
	    if(node ==null) return;
	    System.out.print(node.data+" ");
	    pre_order(node.left);
	    pre_order(node.right);
	    
	}

	public static void main(String[] args) {
		Scanner scn = new Scanner(System.in);
		int n = scn.nextInt();
		int[] arr = new int[n];
		for (int i = 0; i < n; i++) {
			arr[i] = scn.nextInt();
		}
		
		Main b = new Main(arr);
		b.modifyBST();
		b.preorder();
	}

}

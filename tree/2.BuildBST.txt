Problem Name: Build BST
Problem Difficulty: None
Problem Constraints: 1 < t < 100 <br>
1< n < 1000
Problem Description:
You are given a sorted data of n integers. You have to form a balanced Binary Search Tree and then print preorder traversal of the tree.


Input Format: First line contains integer t as number of test cases. <br>
Each test case contains following input. First line contains integer n  which represents the length of the data and next line contains n space separated integers denoting the elements for the BST.

Sample Input: 1
7
1 2 3 4 5 6 7
Output Format: For each testcase , print the preorder traversal of the BST in a new line.

Sample Output: 4 2 1 3 6 5 7



=====Solution=====
#include<stdio.h>
#include<stdlib.h>

/* A Binary Tree node */
struct TNode
{
	int data;
	struct TNode* left;
	struct TNode* right;
};

struct TNode* newNode(int data);

/* A function that constructs Balanced Binary Search Tree from a sorted array */
struct TNode* sortedArrayToBST(int arr[], int start, int end)
{
	/* Base Case */
	if (start > end)
	return NULL;

	/* Get the middle element and make it root */
	int mid = (start + end)/2;
	struct TNode *root = newNode(arr[mid]);

	/* Recursively construct the left subtree and make it
	left child of root */
	root->left = sortedArrayToBST(arr, start, mid-1);

	/* Recursively construct the right subtree and make it
	right child of root */
	root->right = sortedArrayToBST(arr, mid+1, end);

	return root;
}

/* Helper function that allocates a new node with the
given data and NULL left and right pointers. */
struct TNode* newNode(int data)
{
	struct TNode* node = (struct TNode*)
						malloc(sizeof(struct TNode));
	node->data = data;
	node->left = NULL;
	node->right = NULL;

	return node;
}

/* A utility function to print preorder traversal of BST */
void preOrder(struct TNode* node)
{
	if (node == NULL)
		return;
	printf("%d ", node->data);
	preOrder(node->left);
	preOrder(node->right);
}

/* Driver program to test above functions */
int main()
{
    int t;
    scanf("%d", &t);
    for(int i=0;i<t;i++)
    {
        int n;
        scanf("%d", &n);
        int arr[n];
        for(int j=0;j<n;j++)
        scanf("%d", &arr[j]);
        struct TNode *root = sortedArrayToBST(arr, 0, n-1);
	//printf("n PreOrder Traversal of constructed BST ");
	preOrder(root);
	printf("\n");
        
    }
	/*int arr[] = {1, 2, 3, 4, 5, 6, 7};
	int n = sizeof(arr)/sizeof(arr[0]);

	
	struct TNode *root = sortedArrayToBST(arr, 0, n-1);
	printf("n PreOrder Traversal of constructed BST ");
	preOrder(root);*/

	return 0;
}
 
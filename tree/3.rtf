{\rtf1\ansi\ansicpg1252\cocoartf2578
\cocoatextscaling0\cocoaplatform0{\fonttbl\f0\fswiss\fcharset0 Helvetica;}
{\colortbl;\red255\green255\blue255;}
{\*\expandedcolortbl;;}
\paperw11900\paperh16840\margl1440\margr1440\vieww33400\viewh17460\viewkind0
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardirnatural\partightenfactor0

\f0\fs24 \cf0   
\fs48 Strings\
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardirnatural\partightenfactor0

\fs28 \cf0 Strings in c++ is basically  an inbuilt class\
It contains a character array\
Initialisation\
String s0;\
String s1(\'93hello\'94);\
String s2(s1);\
String s3=s2;\
\
Methods\
String str=\'93 I want to have apple juice\'94;\
Str.find(\'93apple\'94); \'97>returns the starting index of its first index\
Str.clear();\
Str.empty() \'97> returns a boolean value true in case the string is empty
\fs36 \

\fs28 Str.append(\'93 now\'94);\
We can also add an character using str.append()\
 s=s+str;\
We can also use the + operator \
str.erase(5,6); \'97> from index 5 clear 6 characters from the string \
s1.compare(s2) \'97> for comparing s1 with s2\
>, < can also be used\
We can access string characters\
\
Using iterators\
 S1.begin() \'97>iterator pointing at beginning of the string s1, s1.end()\
 Iterator is basically a pointer \
 Either type string::iterator it;\
Or use auto it = s1.begin()\
 Keyword auto is used as a data type when we want the compiler to automatically assign\
 the data type to the variable by looking to what kind of value is being assigned to it\
\
\
// For each loop (special feature in c++11)\
for(auto c:s1)\{\
 Cout<<c<<\'93 \'94;\
\}\
  \
 \
\
\
}
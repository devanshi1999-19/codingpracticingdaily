Problem Name: Find sum at level K
Problem Difficulty: None
Problem Constraints: 1 <= Nodes in tree <=1000<br>1<K<10
Problem Description:
Take input of a generic tree using buildtree() function and also take input K the level at which we need to find the sum.

Input Format: Take a generic tree input where you are first given the data of the node and then its no of children. The input is of preorder form and it is assured that the no of children will not exceed 2.
The input of the tree is followed by a single integer K.
Sample Input: 1 2
2 2
3 0
4 0
5 2
6 0
7 0
2
Output Format: A single line containing the sum at level K.
Sample Output: 20



=====Solution=====
#include <iostream>
#include <queue>
using namespace std;
class node
{
public:
    int data;
    node(int d)
    {
        data = d;
        right = left = NULL;
    }
    node *right;
    node *left;
};

node *buildTree(node *root)
{
    int d, n;
    cin >> d >> n;
    root = new node(d);
    if (n == 0)
    {
        return root;
    }
    else if (n == 1)
    {
        root->left = buildTree(root->left);
        return root;
    }
    else
    {
        root->left = buildTree(root->left);
        root->right = buildTree(root->right);
        return root;
    }
}

int sumAtLevelK(node *root, int k)
{
    if (root == NULL)
        return 0;

    int ans = 0;

    queue<node *> q;
    q.push(root);
    q.push(NULL);
    bool flag = false;

    while (!q.empty())
    {
        node *f = q.front();
        if (f == NULL)
        {
            q.pop();
            if (!q.empty())
            {
                q.push(NULL);
            }
            k--;
            if (flag)
                break;
            if (k == 0)
                flag = true;
        }
        else
        {
            if (flag)
                ans += f->data;
            q.pop();

            if (f->left)
            {
                q.push(f->left);
            }
            if (f->right)
            {
                q.push(f->right);
            }
        }
    }

    return ans;
}

int main()
{
    node *root = NULL;
    root = buildTree(root);
    int k;
    cin >> k;
    cout << sumAtLevelK(root, k) << endl;
    return 0;
}
